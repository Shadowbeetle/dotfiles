################################################################################
# this zshrc is intended for linux use
#
# Because we don't want to commit our secrets to VCS, create
# a file named ".secrets" in your home directory and export all the secrets
# you have from there
#
################################################################################

[ -f $HOME/.secrets ] && source $HOME/.secrets
if [ -f $HOME/.secrets ]; then
  source $HOME/.secrets
else
  echo "ERROR .secrets file not found, some programs might not work"
  echo
fi

# Oh my zsh
export ZSH=$HOME/.oh-my-zsh

# vim 256 color support
export TERM=screen-256color

### SHELL
## ZSH
source ~/.zplug/init.zsh

zplug plugins/git, from:oh-my-zsh
zplug plugins/copybuffer, from:oh-my-zsh
zplug plugins/gitignore, from:oh-my-zsh
zplug plugins/nvm, from:oh-my-zsh
zplug plugins/dirhistory, from:oh-my-zsh
zplug denysdovhan/spaceship-prompt, use:spaceship.zsh, from:github, as:theme
zplug zsh-users/zsh-autosuggestions
zplug zsh-users/zsh-syntax-highlighting
zplug zsh-users/zsh-completions
zplug felixr/docker-zsh-completion
zplug vifon/deer, use:deer
zplug djui/alias-tips
zplug "hlissner/zsh-autopair", defer:2
zplug Tarrasch/zsh-bd
zplug arzzen/calc.plugin.zsh

# setup deer
zle -N deer
bindkey '\ek' deer

# Install plugins if there are plugins that have not been installed
if ! zplug check --verbose; then
  printf "Install? [y/N]: "
  if read -q; then
      echo; zplug install
  fi
fi
# Load all the plugins!!!
source $ZSH/oh-my-zsh.sh
zplug load

# source ~/.antigen/antigen.zsh

COMPLETION_WAITING_DOTS="true"
SPACESHIP_BATTERY_THRESHOLD=99
SPACESHIP_TIME_SHOW=true

# quicly source .zshrc 
alias sz='source ~/.zshrc'

# Tools
# fuzzy finder for shell history
# https://github.com/junegunn/fzf
if [ -f $HOME/.fzf.zsh ]; then
  source $HOME/.fzf.zsh
else
  echo "install fzf into $HOME/.fzf.zs"
  echo "run 'git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install'"
  echo
fi

# command line file manager
if [ commands[ranger] ]; then
  alias ra='ranger'
else 
  echo "install ranger"
  echo "run 'sudo pacman -S ranger'"
  echo
fi

# autojump 
# https://github.com/wting/autojump/issues/488
# replace typeset -U to typeset -u in autojump.zsh
if [ -f /usr/share/autojump/autojump.zsh ]; then
  source /usr/share/autojump/autojump.zsh
else
   echo "install autojump"
   echo "run 'sudo pacman -S autojump'"
   echo
fi

# colorized cat
# http://pygments.org/docs/cmdline/
if [ $commands[pygmentize] ]; then
  alias c='pygmentize -O style=emacs -f console256 -g'
else
  echo "install pygmentize"
  echo "run 'pacman -S pygmentize'"
  echo
fi

# case insensitive grep
alias igrep="grep -i"

# functions
function killport() {
    fuser -k $1/tcp
}

# ssh
## check if ssh agent is already running by looking for keys to be added
ssh-add -l &>/dev/null
if [ "$?" = 2 ]; then
  # if not ssh-agent is running, try to load from file
  test -r ~/.ssh-agent && \
    eval "$(<~/.ssh-agent)" >/dev/null

  # if there is no ~/.ssh-agent, start the ssh agent and save it to file
  ssh-add -l &>/dev/null
  if [ "$?" = 2 ]; then
    (umask 066; ssh-agent > ~/.ssh-agent)
    eval "$(<~/.ssh-agent)" >/dev/null
    ssh-add
  fi
fi

# editor
export EDITOR="vim"

### DEVELOPMENT
## NODE.JS
# NVM
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
nvm use 2> /dev/null

# overwrite builtin directory movements to use nvm
function cd () {
  builtin cd "$@" && nvm use 2>/dev/null
}

function popd () {
  builtin popd "$@" && nvm use 2>/dev/null
}

function pushd () {
  builtin pushd "$@" && nvm use 2>/dev/null
}

# NPM
# token in secrets
alias npml="npm run lint -- --fix 2> /dev/null"
alias npmt="npm t 2> /dev/null"
alias npmlt="npml && npmt"

# list directory tree without node_modules
alias tree-node="tree -I node_modules"

## GO
export GOPATH=$HOME/Projects
export GOROOT=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
export GO111MODULE=auto

alias goc="go test -coverprofile cover.out && go tool cover -html=cover.out -o cover.html && firefox cover.html"

### DEVOPS
## KUBERNETES
alias kuse-mini='kubectl config use-context minikube'
alias kc='kubectl'
# Check if 'kubectl' is a command in $PATH
if [ $commands[kubectl] ]; then

  # Placeholder 'kubectl' shell function:
  # Will only be executed on the first call to 'kubectl'
  kubectl() {

    # Remove this function, subsequent calls will execute 'kubectl' directly
    unfunction "$0"

    # Load auto-completion
    source <(kubectl completion zsh)

    # Execute 'kubectl' binary
    $0 "$@"
  }
fi

## Docker
alias up='docker-compose up'
alias down='docker-compose down'

## AWS
export PATH=~/.local/bin:$PATH

## VAGRANT
export VAGRANT_HOME=/run/media/ext4/VirtualBox/
export VAGRANT_DEFAULT_PROVIDER=virtualbox

## SERVER SSH ALIASES
# ssh aliases
# $HOME/.secrets

### HOME APPLICATIONS
eval $(thefuck --alias)
alias pbcopy='xclip -selection clipboard'
alias pbpaste='xclip -selection clipboard -o'

alias isod='date +%Y-%m-%d'
alias cisod="isod | pbcopy"
alias xo='xdg-open'

export XDG_DATA_DIRS="$XDG_DATA_DIRS:/var/lib/flatpak/exports/share/applications"

## Navigation
# Jump to dotfiles
# jump instantly to applications directory
hash -d -- apps='/usr/share/applications/'

hash -d -- dot="$HOME/Projects/src/github.com/Shadowbeetle/dotfiles/"
alias cdot='code ~/Projects/src/github.com/Shadowbeetle/dotfiles'
alias vdot='vim ~/Projects/src/github.com/Shadowbeetle/dotfiles'
alias gdot='gvim ~/Projects/src/github.com/Shadowbeetle/dotfiles'

alias vv='vim ~/.vimrc'
alias vz='vim ~/.zshrc'

hash -d -- projects="$GOPATH/src"

hash -d -- notes="$HOME/Dropbox/Notes/"
alias cnotes='code ~/Dropbox/Notes'
alias vnotes='vim ~/Dropbox/Notes'
alias gnotes='gvim ~/Dropbox/Notes'


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
