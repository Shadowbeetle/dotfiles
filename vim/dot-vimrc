" Syntax highlighting
"
" ===================
filetype on
filetype plugin on
filetype indent on
syntax enable
syntax on
set omnifunc=syntaxcomplete#Complete

" omnicomplete details: https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set completeopt=longest,menuone
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

inoremap <expr> <M-,> pumvisible() ? '<C-n>' :
  \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'


set tabstop=2           " when indenting with '>', use 2 spaces width
set shiftwidth=2        " On pressing tab, insert 2 spaces
set expandtab           " use spaces instead of tabs
set autoindent
set smartindent
set smarttab
set wildignore+=node_modules/**
set wildignore+=vendor/**
set wildignore+=package-lock.json
set number              " turn line numbering on
set undolevels=1000
set autochdir           " change directory to currently edited file
set encoding=utf-8
set list                " show non printable characters
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,space:·
set cursorcolumn        " highlight current column
set cursorline
set splitbelow
set splitright
set ttymouse=xterm2     " use the mouse in tmux
set mouse=a             " use the mouse in tmux
:command WQA wqa
:command WQa wqa
:comman Wqa wqa
:command WQ wq
:command Wq wq
:command WA wa
:command Wa wa
:command QA qa
:command Qa qa
:command W w
:command Q q

" Protect changes between writes. Default values of
" updatecount (200 keystrokes) and updatetime
" (4 seconds) are fine
set swapfile
set directory^=~/.vim/swap//

" protect against crash-during-write
set writebackup
" but do not persist backup after successful write
set nobackup
" use rename-and-write-new method whenever safe
set backupcopy=auto
" patch required to honor double slash at end
if has("patch-8.1.0251")
	" consolidate the writebackups -- not a big
	" deal either way, since they usually get deleted
	set backupdir^=~/.vim/backup//
end

" persist the undo tree for each file
set undofile
set undodir^=~/.vim/undo//

" edit vimrc in a different split screen
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" source vimrc
nnoremap <leader>sv :source $MYVIMRC<cr>
" show/hid\l non printable characters
nnoremap <leader>ss :set list!<cr>
" specify file to be diffed against the currently open one
nnoremap <leader>df :vert diffsplit 

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap yyy :%y+<cr> " copy whole file to X clipboard

:set foldmethod=indent
augroup remember_folds
  autocmd!
  autocmd BufWinLeave *.go mkview
  autocmd BufWinEnter *.go silent! loadview
augroup END

augroup markdown
  au!
  au FileType markdown :iabbrev <buffer> ---- —
  au FileType markdown :inoremap <buffer> ** ****<left><left>
  au FileType markdown :inoremap <buffer> _ __<left>
  au FileType markdown :inoremap <buffer> <C-b> ****<left><left>
  au FileType markdown :inoremap <buffer> <C-l> __<left>
  au FileType markdown :set list!
  au FileType markdown :setlocal foldmethod=manual
augroup END

" Only show cursorcolumn and nonprintable characters in the current window and in normal mode.
augroup cline
  au!
  au InsertEnter * set nocursorcolumn
  au InsertEnter * set nocursorline
  au InsertEnter * set nolist
  au InsertLeave * set cursorcolumn
  au InsertLeave * set cursorline
  au InsertLeave * set list
augroup END

"" Plugins
"" ===================
call plug#begin('~/.vim/bundle')
Plug 'christoomey/vim-tmux-navigator'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/rainbow_parentheses.vim'

Plug 'airblade/vim-gitgutter'       " Nice git lines at the side

Plug 'tpope/vim-surround'           " Surround
Plug 'tpope/vim-repeat'             " Make cs ds yss repeatable
Plug 'tpope/vim-commentary'         " Commentary
Plug 'tpope/vim-markdown', { 'for': 'markdown' }

Plug 'easymotion/vim-easymotion'    " AceJump like movement
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }
" Plug 'HerringtonDarkholme/yats.vim', { 'for': 'typescript' }
" Plug 'pangloss/vim-javascript'      " JavaScript syntax highlighting
" Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
Plug 'pantharshit00/vim-prisma'
Plug 'elmcast/elm-vim'
" Plug 'prettier/vim-prettier', {
"   \ 'do': 'npm install',
"   \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
Plug 'mustache/vim-mustache-handlebars'
Plug 'dense-analysis/ale'

Plug 'Raimondi/delimitMate' " autclose brackets
Plug 'vim-airline/vim-airline'      " vim powerline
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-scripts/vim-auto-save'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'cespare/vim-toml'
Plug 'mbbill/undotree'
Plug 'brooth/far.vim'               " search and replace in multiple files with https://github.com/brooth/far.vim 
Plug 'posva/vim-vue'
Plug 'slashmili/alchemist.vim'
Plug 'elixir-editors/vim-elixir'
Plug 'wannesm/wmgraphviz.vim'
Plug 'davidhalter/jedi-vim'

" For writing
" ====================
Plug 'junegunn/limelight.vim', { 'on': 'Limelight' }     " Focusing tool
Plug 'junegunn/goyo.vim', { 'on': 'Limelight' }          " Focusing tool
Plug 'rhysd/vim-grammarous', { 'on': 'GrammarousCheck' } " English spell check

"Colorschemes
" =====================

" Plug 'dracula/vim', { 'as': 'dracula' }
" Plug 'srcery-colors/srcery-vim'
Plug 'gruvbox-community/gruvbox'

call plug#end()

" Colorscheme
" =======

color gruvbox
set background=dark

" Tern
" ==================

augroup javascript_completion
  au!
  au FileType javascript nnoremap <leader>td :TernDef<CR>
  au FileType javascript nnoremap <leader>tr :TernRename<CR>
  au FileType javascript nnoremap <leader>tR :TernRefs<CR>
augroup END

" Tsuquyomi
" =========

augroup tsuquyomi
  au!
  set ballooneval
  autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
  autocmd FileType typescript nmap <Leader>t :echo tsuquyomi#hint()<CR>
augroup END
" ale
" ===
let g:ale_fixers = {
      \  'javascript': ['prettier', 'eslint'],
      \  'typescript': ['prettier', 'eslint'],
      \  'css': ['prettier']
      \  }
let g:ale_fix_on_save = 1
let g:ale_linter_aliases = {'typescriptreact': 'typescript'}
let g:ale_linter_aliases = {'javascriptreact': 'typescript'}

nnoremap <C-S-I> :%!npx prettier --stdin-filepath % <CR><CR>

" CoC
" ===================

inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <c-@> coc#refresh()

" EasyMotion
" ===================
" n-character search 
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 1

" These `n` & `N` mappings are optional. You do not have to map `n` & `N` to EasyMotion.
" Without these mappings, `n` & `N` works fine. (These mappings just provide
" different highlight method and have some other features )
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)

" NERDTree
" ==================
nnoremap <silent> <leader>m :NERDTreeToggle<CR>

" GitGutter
" =========
nmap ]h <Plug>GitGutterNextHunk
nmap [h <Plug>GitGutterPrevHunk
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterUndoHunk

" Fzf
" =======
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-l> <plug>(fzf-complete-line)
imap <c-x><c-f> <plug>(fzf-complete-path)
nmap <C-p> :GFiles<CR>
nmap <C-g> :FZF<CR>
let g:fzf_layout = { 'down': '20%' }

" Limelight
" =========
" Color name (:help cterm-colors) or ANSI code
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240

" Color name (:help gui-colors) or RGB color
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_conceal_guifg = '#777777'

let g:limelight_default_coefficient=0.7
nnoremap <leader>f :Limelight!!<cr>

" Airline
" =======
let g:airline_powerline_fonts=0

" Autosave
" ========

let g:auto_save = 1
let g:auto_save_in_insert_mode = 0

" vim-go
" ======

let g:go_fmt_command = "goimports"
let g:go_fmt_experimental = 1

" debug
nnoremap <leader>gdb :GoDebugBreakpoint<cr>
nnoremap <leader>gdc :GoDebugContinue<cr>
nnoremap <leader>gds :GoDebugStart<cr>
nnoremap <leader>gdt :GoDebugTest<cr>
nnoremap <leader>gdS :GoDebugStop<cr>
nnoremap <leader>gdr :GoDebugRestart<cr>
nnoremap <leader>gdp :GoDebugPrint

" other
nnoremap <leader>gr :GoRename<cr>
nnoremap <leader>gR :GoRename
nnoremap <leader>grr :GoReferrers<cr>
nnoremap <leader>gD :GoDoc<cr>

" vim-javascript
" ==============

let g:javascript_plugin_jsdoc = 1

augroup javascript_folding
  au!
  au FileType javascript setlocal foldmethod=syntax
augroup END

" UndoTree
" ========
nnoremap <leader>u :UndotreeToggle<cr>

" GrammarousCheck
" ===============

let g:grammarous#show_first_error = 1
nmap <F4> <Plug>(grammarous-fixit)
nmap <f5> <Plug>(grammarous-move-to-previous-error)
nmap <F6> <Plug>(grammarous-move-to-next-error)
nmap <F7> <Plug>(grammarous-remove-error)
nmap <leader>ca <Plug>(grammarous-fixall)

